<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/security https://www.springframework.org/schema/security/spring-security-5.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">
		
		<bean id="loginSuccess" class="member.controller.LoginSuccessHandler"></bean>
		
		<bean id="passwordEncoder" class="member.controller.CustomPasswordEncoder"></bean>
		
		<bean id="bcryptEncoder" class="org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder"></bean>
		
		<security:http>
			
			
			<security:intercept-url pattern="/all/*" access="permitAll"/>
			
			<security:intercept-url pattern="/member/*" access="hasRole('ROLE_MEMBER')"/>
			
			<security:intercept-url pattern="/admin/*" access="hasRole('ROLE_ADMIN')"/>
			
			<!-- <security:access-denied-handler error-page="/accessError/"/> -->
			
			
			<security:form-login login-page="/all/loginForm" username-parameter="username" authentication-success-handler-ref="loginSuccess" />
			
			
			<!-- 
				1. login-page : login form 페이지 URL
				2. username-parameter : form id의 name 속성값
				3. password-parameter : form pw의 name 속성값
				4. login-processing-url : form action 값 (security를 이용해 인증처리)
				5. default-target-url : 로그인 성공 시 이동 URL
				6. authentication-failure-url : 로그인 실패 시 이동 URL
				7. always-use-default-target : true 로 하면 무조건 default-target-url 로 이동한다. false 로 하면 authentication-success-handler 대로 redirect 된다.
				8. authentication-success-handler-ref : 로그인 성공 시 프로세스 정의, bean id 입력. 만약 최종 로그인일시를 DB에 기록해야한다면 handler로 처리하는게 좋다. res.sendRedirect 등으로 처리
				9. authentication-failure-handler-ref : 로그인 실패 시 프로세스 정의, bean id 입력
			-->
			
			<security:logout logout-success-url="/all/loginForm" invalidate-session="true" delete-cookies="remember_me,JSESSION_ID"/>
			
			<!-- 
				logout 요소
				1. logout-url : 로그아웃 요청할 경로. 기본값은 /logout. 사용자가 원하는 경로 지정해서 로그아웃 페이지로 이동해 처리 할 수 있음. 기본적으로 post로 요청할 수 있고 csrf가 적용되어 있음.
				2. logout-success-url : 로그아웃이 성공하면 이동할 경로를 지정. controller에서 redirect 지정해 줄 수도 있다.
				3. success-hanlder-ref : 로그아웃 후 처리될 내용을 담은 클래스를 지정. 핸들러가 지정되면 logout-success-url 값은 무시된다.
				4. invalidate-session : 로그 아웃시 세션정보 제거 여부. 기본값은 true
				5. delete-cookies : 로그아웃시 제거할 쿠키 이름을 지정.
			-->
			
			
			<security:session-management>
				<security:concurrency-control max-sessions="1" expired-url="/all/loginForm"/>
			</security:session-management>
			
			<!-- 
				session-management 
				1. invalid-session-url : invalid session(세션 타임아웃 등) 일 때 이동 URL
				2. max-sessions : 최대 허용 가능한 세션 수
				3. expired-url : 중복 로그인 발생시 이동 URL (처음 접속한 세션이 invalidate가 되고 다음 요청시 invalid-session-url로 이동)
				4. error-if-maximum-exceeded : max-sessions을 넘었을때 접속한 세션을 실패처리할지 여부 (expired-url와 얘중에 하나만 쓰면 될듯)
			-->
			
			<security:remember-me data-source-ref="dataSource" token-validity-seconds="604800"/>
			
			<!-- 
				remember-me 속성
				1. key : 쿠키에 사용돠는 값을 암호화하기 위한 키
				2. data-source-ref : DataSource를 지정하고 테이블을 이용해 기존 로그인 정보를 기록(옵션)
				3. remember-me-cookies : 브라우저에 보관되는 쿠키의 이름을 지정. 기본값은 remember-me
				4. remember-me-parameter : 웹 화면에서 로그인할 때 'remember-me'는 대부분 체크박스를 이용한다. 이 때 체크박스 태그는 name 속성을 의미.
				5. token-validity-seconds : 쿠키의 유효시간 지정. 초단위이다. 7일 : 604800
			 -->
			
			
			
		</security:http>
		
		<security:authentication-manager>
		
		<security:authentication-provider>
			<security:jdbc-user-service data-source-ref="dataSource" 
				users-by-username-query="select username, password, enabled from membertable where username=?"
				authorities-by-username-query="select username, auth as authority from membertable where username=?"/>
			
			<security:password-encoder ref="bcryptEncoder"/>
		</security:authentication-provider>
		
		</security:authentication-manager>
		
</beans>
